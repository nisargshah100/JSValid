// Generated by CoffeeScript 1.3.1
(function() {
  var JSValid,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  JSValid = {};

  JSValid.Validator = {};

  JSValid.Validator.RequiredValidation = (function() {

    RequiredValidation.name = 'RequiredValidation';

    function RequiredValidation(name, params) {
      this.message = (params != null ? params.message : void 0) || ("" + name + " is required");
    }

    RequiredValidation.prototype.validate = function(obj) {
      if (!(obj != null) || obj === '') {
        return this.message;
      }
    };

    return RequiredValidation;

  })();

  JSValid.Validator.MinLengthValidation = (function() {

    MinLengthValidation.name = 'MinLengthValidation';

    function MinLengthValidation(name, params) {
      if (params && typeof params === 'number') {
        this.length = params;
      }
      this.length || (this.length = (params != null ? params.value : void 0) || 6);
      this.message || (this.message = (params != null ? params.message : void 0) || ("" + name + " is too short. It must be atleast " + this.length + " characters long"));
    }

    MinLengthValidation.prototype.validate = function(obj, name) {
      if (!(obj != null) || String(obj).length < this.length) {
        return this.message;
      }
    };

    return MinLengthValidation;

  })();

  JSValid.Validator.MaxLengthValidation = (function() {

    MaxLengthValidation.name = 'MaxLengthValidation';

    function MaxLengthValidation(name, params) {
      if (params && typeof params === 'number') {
        this.length = params;
      }
      this.length || (this.length = (params != null ? params.value : void 0) || 6);
      this.message || (this.message = (params != null ? params.message : void 0) || ("" + name + " is too long. It can be atmost " + this.length + " characters long"));
    }

    MaxLengthValidation.prototype.validate = function(obj) {
      if ((obj != null) && String(obj).length > this.length) {
        return this.message;
      }
    };

    return MaxLengthValidation;

  })();

  JSValid.Validator.EmailValidation = (function() {

    EmailValidation.name = 'EmailValidation';

    function EmailValidation(name, params) {
      this.message || (this.message = (params != null ? params.message : void 0) || ("" + name + " is invalid"));
    }

    EmailValidation.prototype.validate = function(obj) {
      var match;
      if (obj != null) {
        match = obj.match(/^[-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+)*\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?$/i);
      }
      if (!match && (obj != null) && !(obj === '')) {
        return this.message;
      }
    };

    return EmailValidation;

  })();

  JSValid.Validator.InclusionValidation = (function() {

    InclusionValidation.name = 'InclusionValidation';

    function InclusionValidation(name, params) {
      if (params && JSValid.Validation.isArray(params)) {
        this["in"] = params;
      }
      this["in"] || (this["in"] = (params != null ? params.value : void 0) || []);
      this.message || (this.message = (params != null ? params.message : void 0) || ("" + name + " must be (" + (this["in"].join(',')) + ")"));
    }

    InclusionValidation.prototype.validate = function(obj) {
      if (__indexOf.call(this["in"], obj) < 0) {
        return this.message;
      }
    };

    return InclusionValidation;

  })();

  JSValid.Validator.ExclusionValidation = (function() {

    ExclusionValidation.name = 'ExclusionValidation';

    function ExclusionValidation(name, params) {
      if (params && JSValid.Validation.isArray(params)) {
        this.ex = params;
      }
      this.ex || (this.ex = (params != null ? params.value : void 0) || []);
      this.message || (this.message = (params != null ? params.message : void 0) || ("" + name + " cannot be (" + (this.ex.join(',')) + ")"));
    }

    ExclusionValidation.prototype.validate = function(obj) {
      if (__indexOf.call(this.ex, obj) >= 0) {
        return this.message;
      }
    };

    return ExclusionValidation;

  })();

  JSValid.Validator.FormatValidation = (function() {

    FormatValidation.name = 'FormatValidation';

    function FormatValidation(name, params) {
      this.message || (this.message = (params != null ? params.message : void 0) || ("" + name + " doesn't match format"));
      if (params instanceof RegExp) {
        this.format = params;
      }
      this.format || (this.format = (params != null ? params.value : void 0) || RegExp());
    }

    FormatValidation.prototype.validate = function(obj) {
      if (!String(obj).match(this.format)) {
        return this.message;
      }
    };

    return FormatValidation;

  })();

  JSValid.Validation = (function() {

    Validation.name = 'Validation';

    function Validation() {
      this.validators = {};
      this.errors = {};
    }

    Validation.rules = {
      'required': JSValid.Validator.RequiredValidation,
      'min_length': JSValid.Validator.MinLengthValidation,
      'max_length': JSValid.Validator.MaxLengthValidation,
      'email': JSValid.Validator.EmailValidation,
      'in': JSValid.Validator.InclusionValidation,
      'ex': JSValid.Validator.ExclusionValidation,
      'format': JSValid.Validator.FormatValidation
    };

    Validation.isArray = function(obj) {
      return Object.prototype.toString.apply(obj) === '[object Array]';
    };

    Validation.flatten = function(array) {
      var flat, i, l, type;
      flat = [];
      i = 0;
      l = array.length;
      while (i < l) {
        type = Object.prototype.toString.call(array[i]).split(" ").pop().split("]").shift().toLowerCase();
        if (type) {
          flat = flat.concat((/^(array|collection|arguments|object)$/.test(type) ? JSValid.Validation.flatten(array[i]) : array[i]));
        }
        i++;
      }
      return flat;
    };

    Validation.prototype.errors_array = function() {
      var error;
      return JSValid.Validation.flatten((function() {
        var _results;
        _results = [];
        for (error in this.errors) {
          _results.push(this.errors[error]);
        }
        return _results;
      }).call(this));
    };

    Validation.prototype.getRule = function(rule) {
      var key, props;
      if (typeof rule === 'string') {
        return rule;
      } else {
        props = (function() {
          var _results;
          _results = [];
          for (key in rule) {
            _results.push(key);
          }
          return _results;
        })();
        if (props.length > 0) {
          return props[0];
        } else {
          return null;
        }
      }
    };

    Validation.prototype.validate = function() {
      var attr, rule, rule_object, rules, validator, _base, _i, _len, _results;
      attr = arguments[0], rules = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _results = [];
      for (_i = 0, _len = rules.length; _i < _len; _i++) {
        rule_object = rules[_i];
        rule = this.getRule(rule_object);
        validator = Validation.rules[rule];
        (_base = this.validators)[attr] || (_base[attr] = []);
        if (validator) {
          _results.push(this.validators[attr].push(new validator(attr, rule_object[rule])));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Validation.prototype.isValid = function(obj) {
      var attr, result, validator, _base, _i, _len, _ref;
      this.errors = {};
      for (attr in this.validators) {
        _ref = this.validators[attr];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          validator = _ref[_i];
          result = validator.validate(obj[attr]);
          if (result) {
            (_base = this.errors)[attr] || (_base[attr] = []);
            this.errors[attr].push(result);
          }
        }
      }
      return this.errors_array().length === 0;
    };

    return Validation;

  })();

  window.JSValid = JSValid;

}).call(this);
